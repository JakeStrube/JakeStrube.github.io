{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This is the individual datasheet for Jake Strube on team 204. Jake is incharge of the HMI subsystem for the team and all related assingments are linked below as well as a link to team 204's main page.</p>"},{"location":"#directory","title":"Directory","text":""},{"location":"#inidivudal-assignments","title":"Inidivudal Assignments","text":"<ul> <li>Component Selection</li> <li>Power Budget</li> <li>Individual Block Diagram</li> <li>HMI Schematic and PCB</li> </ul>"},{"location":"#to-group-website","title":"To group website","text":"<ul> <li>Team 204 Website</li> </ul>"},{"location":"API/","title":"API","text":""},{"location":"API/#overview","title":"Overview","text":"<p>The Application Programming Interface (API) is the connection between computers. We will use the API system to communicate between each team memebers subsystem. Outlined below is how the team plans to communicate with each other.</p>"},{"location":"API/#message-protocol","title":"Message Protocol","text":""},{"location":"API/#messages-that-i-send","title":"Messages That I Send","text":"<p>These are messages that I will send out to my teammates. Each table shows the message structure with along with a descrioption of how it works and who will recieve the message.</p>"},{"location":"API/#change-following-distance","title":"Change Following Distance","text":"Type Byte 1 Byte 2 Variable Name message_type set_distance Variable Type uint8_t uint8_t Min Value 0 0 Max Value 9 100 Example 1 20 <ul> <li>This message sets the distance at which the robot is supposed to stay away from the object it is detecting. The message begins with byte one, the message type, allowing the reciever to sort the message easier, then byte 2 is the value of the distance that the robot is supposed to keep away from the object its tracking. The set_distance value does not directly communicate with sensors or motor it only states the distance goal that the robot is supposed to keep. This message will be sent to both Andrey and Divine's subsystems that they will use accordingly.</li> </ul>"},{"location":"API/#change-motor-speed","title":"Change Motor Speed","text":"Type Byte 1 Byte 2 Variable Name message_type motor_speed Variable Type uint8_t int8_t Min Value 0 0 Max Value 9 100 Example 0 50 <ul> <li>This message changes the speed at which the motors will move at. The message begins with the message type allowing the reciever to sort the message easier, then byte 2 is the target speed at which the motor will travel at. The speed value does not control the motor directly just states at what speed all the motors will move at. The message will send to both Divine and Jacob's subsystem and they will update accordingly.</li> </ul>"},{"location":"API/#drive-individual-motor","title":"Drive Individual motor","text":"Type Byte 1 Byte 2 Byte 3 Variable Name message_type motor_id motor_speed Variable Type uint8_t uint8_t int8_t Min Value 0 1 0 Max Value 9 2 100 Example 0 1 30 <ul> <li>This message is for driving the motors independently so that the user can directly control the motors using the buttons on the robot. Byte 1 in the message is the meesage type allowing the reciever to sort the message easier. Then byte 2 is the motor_id to select which motor the message is targeting. Byte 3 is the speed at which the motor will be moving at. This message would be sent to Jacob's subsytem.</li> </ul>"},{"location":"API/#messages-i-recieve","title":"Messages I Recieve","text":"<p>These are the messages that I can recieve from my teammates. The tables show the message structure along with a description of the message and who I would recieve the message from.</p>"},{"location":"API/#update-displayed-following-distance","title":"Update Displayed Following Distance","text":"Type Byte 1 Byte 2 Variable Name message_type display_distance Variable Type uint8_t uint8_t Min Value 0 0 Max Value 9 100 Example 1 20 <ul> <li>This message that I recieve will allow my system to update the displayed speed on the OLED screen. Byte 1 is the message type allowing my system to easily figure out what the message will be. Then byte 2 is the new distance that I will be displaying OLED screen. I will recieve this message from Divine.</li> </ul>"},{"location":"API/#update-displayed-motor-speed","title":"Update Displayed Motor Speed","text":"Type Byte 1 Byte 2 Variable Name message_type display_speed Variable Type uint8_t int8_t Min Value 0 -100 Max Value 9 100 Example 0 50 <ul> <li>This message that I recieve allows my system to update the displayed motor speed to the OLED screen. Byte 1 is the message type allowing my system to easily sort the message. Byte 2 is the new speed that the OLED screen will be displaying. I will recieve this message from Divine.</li> </ul>"},{"location":"API/#other-types-of-messages","title":"Other Types of Messages","text":"<ul> <li>Any message that I recieve that I do not have a protocol to handle the system will delete the message to help clean up the system and reduce clogging.</li> <li>If I recieve a message that I sent but no one recieved it I will delete the message so that the message is not cycling forever clogging the message system.</li> <li>Any message that I recieve that is not directed towards me but is directed to another teammember will be passed over to the next teammate in the subsystem so that they may recieve the message.</li> <li>If a message is addressed to someone not in my team then the system will delete the message preventing clogging due to dud messages.</li> </ul>"},{"location":"Bill_of_Materials/","title":"Bill of Materials","text":""},{"location":"Bill_of_Materials/#overview","title":"Overview","text":"<p>Below is the Bill of Materials for the HMI subsystem including all of the major components like the microcontroller, OLED screen and the push buttons while also including all of the support materials like the resistors, capactiors, etc. The Bill of Materials includes the prices estimated for the required components as well as all of the required information about the product. It also shows the amount of each part that will be ordered and what component on thr schematic each ordered part is paired with.</p>"},{"location":"Bill_of_Materials/#bill-of-materials","title":"Bill of Materials","text":""},{"location":"Bill_of_Materials/#pdf-of-bill-of-materials-with-links","title":"PDF of Bill of Materials with links","text":"<ul> <li>PDF of Bill of Materials</li> </ul>"},{"location":"Component_Selection/","title":"Component Selection","text":""},{"location":"Component_Selection/#overview","title":"Overview","text":"<p>Below all of the major components that are being used in the subsystem are shown with multiple devices that are being considered to be choosen. Each device has its pros and cons, then below each table is the device selection as well as an explination as to why it was selected. The microcontroller selection goes over the choosen microcontroller and why it was selected and how it will be used within the design.</p> <p>The power budget for the subsystem can be found here: Power Budget</p>"},{"location":"Component_Selection/#major-components","title":"Major Components","text":"<p>Switching Voltage Regulator</p> Solution Pros Cons Option 1 LM2575 Switching Voltage Regulator$1.75/eachlink to product * Simple external circuit* Small size * Meets surface mount constraint of project * Good data sheet * All pins are on one side* really small  Option 2  LT1767EMS8 Switching Voltage Regulator $10.57/each  Link to product * Already has a circuit for 12v to 3.3v in its data sheet * Has a good pin layout  * A lot more expensive * A complicated external circuit is required  Option 3  L4971D Switching VOltage Regulator$3.70/each  Link to product * Midprice range * Adjustable voltage output * A lot of pins * An external circuit with lots of components is required <p>Choice: Option 1: LM2575 Switching Voltage Regulator</p> <p>Rationale: This switching voltage regulator emits an output of 3.3 volts when setup with an external circuit like shown in the detailed data sheet. The circuit is not complicated and does not require to many components externally. It also comes at a lower price than either of the other two options.It also allows a current operating range with a max of 1 A and a min voltage of 4 V with a max of 40V</p> <p>Push Buttons</p> Solution Pros Cons Option 1 TS04-66-70-BK-160-SMT Surface Mount Push Button$0.17/eachlink to product * Easy simple switch* Small size* Surface mount button * Not visually appealing * Might be to small so not as easily accessible for everyone to push  Option 2  Gikfun Tact Tactile Push Button $0.35/each  Link to product * Colorful buttons to allow for a more visual experience * big buttons to allow easy pushing for anyone * Not specifically designed for surface mount but the leads can be bent to be surface mount *  Option 3  G3B15AB-XA Push Button Switch$0.81/each  Link to product * Bigger than the other swithces * Removeable cap that can be replaced with a different colored one * More expensive than other switches * <p>Choice: Option 2: Gikfun Tact Tactile Push Button</p> <p>Rationale: This button is the best choice because it comes with different caps to allow easier pushing and to allow color labels on the button. The buttons also allowed for different variations of the caps that could include a label so that colorblind people can easily tell the buttons apart.</p> <p>OLED Screen</p> Solution Pros Cons  Option 1 Teyleten 0.96 inch LCD OLED Display  $2.58/each Link to product * Already provided in class Will have experience using it * It is a small screen <p>Choice: Option 1: Teyleten 0.96 inch LCD OLED Display Board</p> <p>Rationale: The OLED screen is one that we have been given in class and have a lab that teaches us how to use it. Since the OLED is provided in class it will be free to use and gives more time to work with for debugging.</p>"},{"location":"Component_Selection/#microcontroller-selection","title":"Microcontroller Selection","text":""},{"location":"Component_Selection/#reason-for-selection","title":"Reason for Selection","text":"<p>For my microcontroller I decided to go with the PIC18F47Q10-I/PT. This is the surface mount varient of the PIC18F47Q10 that we have used in class. Below is a table of all the information about the microcontroller.</p> PIC Info Answer Model PIC18F47Q10-I/PT Product Page URL Product Page Datasheet URL Datasheet Application Notes URL Application Notes Vendor Link Vendor Link Code Examples Code Example GPIO Read/Write Code Example I2C Read/Write External Resources Programming OLED screen with MPLabX and a PIC Unit Cost $1.65 Supply voltage range 1.8V min to 5.5V max Maximum GPIO Current (per pin) 50 mA Supports External Interrupts Yes Required Programming Hardwar, Cost, URL MPLAB SNAP  Cost: $14.99 Works with MPLabX Yes Works with Microchip Code Configurator Yes"},{"location":"Component_Selection/#role-on-the-team","title":"Role on the team","text":"<p>My role on my team is to design and make the Human Machine Interface (HMI). I plan on doing this by using 3 buttons, a potentiometer, 2 LEDs and an OLED screen. The buttons will allow the user to do simple interactions like start the object following process or control a menu system that is displayed on the OLED screen. The OLED screen is going to be used to display sensor data and prompt instructions to the user on how to use it. The potentiometer will allow the user to select from a range of values to adjust the following distance or the speed of the robot itself. The LEDs will light up when a action is happening for example the green LED might turn on when the robot is in object following mode.</p>"},{"location":"Component_Selection/#pins-needed","title":"Pins needed","text":"<p>For my subsystem I require 12 pins not including power and ground or programming pins. I will need 5 digital input pins, 3 digital output pins, 2 pins for I2C connection, and then 2 for the UART connection. The selected microcontroller </p> Module # Available Needed Associated Pins GPIO 25 8 The button GPIO pins will be on Pins RA6, RA7 and RE2  The potentiometer will be on pin RB1  The two LEDs will be on pins RD5 and RD6  The input pin from the upstream header will be on pin RD4  The output pin that goes to the downstream header will be on pin RC5 ADC 25 0 N/A UART 2 1 Rx on pin RC7  Tx on pin RC6 SPI 2 0 N/A I2C 2 2 SCL1 on pin RC3  SDA1 on pin RC4 PWM 2/2 0 N/A ICSP 3 3 MCLR is on RE3  ICSPDAT is on RB7  ICSPCLK is on RB6"},{"location":"Component_Selection/#mcc-pin-layout","title":"MCC Pin Layout","text":"<p>Below is the pin selection screen in MCC showing all selected pins allocated. It shows the dedicated pins for UART, the I2C pins, the MCLR pin, the open pins for ICSPDAT and ICSPCLK, then all the GPIO pins dedicated to inputs and outputs respectivly. All the pins match the table above with the pin locations. On the left side of the picture it shows the layout of all the pins on the physical microcontroller. The pins are grouped togther in a way that allows space between each section and keeping like pins together for example the Rx and the upstream input are right next to each other while the Tx and the downstream output are next to each other and the two sections are right by each other.</p> <p></p>"},{"location":"Component_Selection/#mcc-microcontroller-details","title":"MCC Microcontroller details","text":"<p>Below is the setup for the microcontroller where it also shows how many different applications that it can support with its pins.</p> <p></p>"},{"location":"Component_Selection/#final-selection","title":"Final Selection","text":"<p>I beleive that the PIC18F47Q10-I/PT is the best choice for my subsystem as it supports every function that I need to do while programing it in MPLabX makes it simple to do everything that I need to do for my subsystem. Its numerous pins allow for extra flexibility with my design and the pin selection process in MPLabX lets me visiualize where every connection will be and how they can be grouped together.</p>"},{"location":"Component_Selection/Power_Budget/","title":"Power Budget","text":""},{"location":"Component_Selection/Power_Budget/#overview","title":"Overview","text":"<p>Below is the power budget for the HMI subsystem. It includes the major component and the microcontroller and estimates how much power it would consume and how long the battery would last with just the one subsystem.</p>"},{"location":"Component_Selection/Power_Budget/#power-budget","title":"Power Budget","text":""},{"location":"Component_Selection/Power_Budget/#explanation","title":"Explanation","text":"<p>The power budget above shows that the minimum amount of battery life expected if all systems were running at their highest power consumption would be 3.1 hours of battery life using the 6 PX1500 AA batteries all connected in series. Each of these batteries according to their data sheet, which is linked below, has a capacity of 3.112Ah and produce 1.5V. When all 6 are aligned in series their combined voltage jumps to 9 volts while keeping the 3.112Ah of battery life. The expected battery life of the subsystem should be more than the 3.1 hours predicted because the subsystem will not be running at max power for the whole 3 hours during its actual operation.</p> <p>-Battery datasheet</p>"},{"location":"Individual_Block_Diagram/","title":"Individual Block Diagram","text":""},{"location":"Individual_Block_Diagram/#block-diagram","title":"Block Diagram","text":""},{"location":"Individual_Block_Diagram/#overview","title":"Overview","text":"<p>Below is the individual block diagram for my component of my team's project. My component is the HMI (Human Machine Interface). The block diagram includes 3 pushbuttons to allow for user input for quick actions, various LEDs to allow for debugging and to let the user know when a function is happening, a potentionmeter to allow a user to select through a range of values, and an OLED screen to display sensor values and allow the user to see what each button does while also providing short instructions on what the user can do next. The microcontroller choose is the PIC18F47Q10 programmed by the Microchip SNAP programmer. All of this is powered by a 3.3V switching power regulator and connects via UART to the rest of my team's PCBs. Each component is shown on the block diagram below along with their connections and type of connection with the number for pins that the component will use.</p>"},{"location":"Individual_Block_Diagram/#block-diagram_1","title":"Block Diagram","text":""},{"location":"Schematic_Design/","title":"Schematic and PCB Design","text":""},{"location":"Schematic_Design/#schematic-overview","title":"Schematic Overview","text":"<p>The schematic for Team 204\u2019s HMI subsystem is divided into three main sections: power input, voltage regulation, and the microcontroller with its peripherals. Power is supplied through a barrel jack that connects to an external source and includes a jumper that allows the system to operate independently or as part of a shared power system. The upstream and downstream connectors have a power transfer line that enables 9V to be shared between subsystems. A jumper on this line allows the group power to be disconnected so the board can run on its own power supply. The voltage regulator section in the top right of the schematic receives 9V from either the barrel jack or group power. It passes through a fuse for overload protection before being stepped down to 3.3V to power the microcontroller, OLED screen, and other components. The microcontroller section features three buttons and a potentiometer for user input along with two LEDs, one red and one green, that indicate system activity and provide real-time feedback. To the right of the microcontroller, the OLED screen displays data and instructions. Several test points on GPIO pins allow for future expansion. Two UART connectors above the microcontroller enable communication with upstream and downstream teammates, and additional test points are available for troubleshooting. Overall, this schematic is designed to be flexible, user-friendly, and adaptable for future improvements to ensure a reliable and efficient HMI subsystem for Team 204.</p>"},{"location":"Schematic_Design/#schematic","title":"Schematic","text":""},{"location":"Schematic_Design/#higher-resoultion-image","title":"Higher Resoultion Image","text":"<p>A higher resoultion image can be found in this PDF of schematic.</p>"},{"location":"Schematic_Design/#schematic-files","title":"Schematic files","text":"<p>The schematic files can be downloaded from the link here: Schematic Zip</p>"},{"location":"Schematic_Design/#pcb-overview","title":"PCB Overview","text":"<p>Below is the PCB for Team 204's HMI subsystem. The PCB is based off of the schematic above and fits on a 75x75mm board. In each corner is a hole 5mm from the sides that is on all of our team's subsystem boards allowing them all to stack vertically saving space within our device. </p>"},{"location":"Schematic_Design/#pcb","title":"PCB","text":""},{"location":"Schematic_Design/#top-of-pcb","title":"Top of PCB","text":""},{"location":"Schematic_Design/#circuit-layout","title":"Circuit Layout","text":""},{"location":"Schematic_Design/#3d-model","title":"3D Model","text":""},{"location":"Schematic_Design/#bottom-of-pcb","title":"Bottom of PCB","text":""},{"location":"Schematic_Design/#circuit-layout_1","title":"circuit layout","text":""},{"location":"Schematic_Design/#3d-model_1","title":"3D Model","text":""},{"location":"Schematic_Design/#higher-resoultion-image_1","title":"Higher Resoultion Image","text":"<p>The higher resoultion images can be found in this PDF of PCB.</p>"},{"location":"Schematic_Design/#hardware-checkoff","title":"Hardware Checkoff:","text":"<p>Here is the MPLAB X code that was used during the hardware check off for EGR 314: MPLABX code</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}