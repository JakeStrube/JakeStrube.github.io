{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This is the individual datasheet for Jake Strube on Team 204 for EGR 314. Jake is incharge of the HMI (Human Machine Interface) subsystem for the team and all related assingments are linked below as well as a link to team 204's main page.</p>"},{"location":"#directory","title":"Directory","text":""},{"location":"#to-group-website","title":"To group website","text":"<ul> <li>Team 204 Website</li> </ul>"},{"location":"#individual-assignments","title":"Individual Assignments","text":"<ul> <li>Component Selection</li> <li>Power Budget</li> <li>Individual Block Diagram</li> <li>HMI Schematic and PCB</li> <li>API Communication</li> <li>Resources</li> </ul>"},{"location":"API/","title":"API","text":""},{"location":"API/#overview","title":"Overview","text":"<p>The Application Programming Interface (API) is the connection between computers. We will use the API system to communicate between each team memebers subsystem. Outlined below is how the team plans to communicate with each other.</p>"},{"location":"API/#message-protocol","title":"Message Protocol","text":""},{"location":"API/#messages-that-i-send","title":"Messages That I Send","text":"<p>These are messages that I will send out to my teammates. Each table shows the message structure with along with a descrioption of how it works and who will recieve the message.</p>"},{"location":"API/#change-following-distance","title":"Change Following Distance","text":"Type Byte 1 Byte 2 Variable Name message_type set_distance Variable Type uint8_t hex Min Value 0 0 Max Value 9 100 Example 1 20 <ul> <li>This message sets the distance at which the robot is supposed to stay away from the object it is detecting. The message begins with byte one, the message type, allowing the reciever to sort the message easier, then byte 2 is the value of the distance that the robot is supposed to keep away from the object its tracking. The set_distance value does not directly communicate with sensors or motor it only states the distance goal that the robot is supposed to keep. This message will be sent to both Andrey and Divine's subsystems that they will use accordingly. The values for the distance is in mm and it is incremented from 0 to 100 in increments of 20.</li> </ul>"},{"location":"API/#change-motor-speed","title":"Change Motor Speed","text":"Type Byte 1 Byte 2 Variable Name message_type motor_speed Variable Type uint8_t hex Min Value 0 0 Max Value 9 100 Example 0 60 <ul> <li>This message changes the speed at which the motors will move at. The message begins with the message type allowing the reciever to sort the message easier, then byte 2 is the target speed at which the motor will travel at. The speed value does not control the motor directly just states at what speed all the motors will move at. The message will send to both Divine and Jacob's subsystem and they will update accordingly. The values for the speed is in mm and it is incremented from 0 to 100 in increments of 20.</li> </ul>"},{"location":"API/#messages-i-recieve","title":"Messages I Recieve","text":"<p>These are the messages that I can recieve from my teammates. The tables show the message structure along with a description of the message and who I would recieve the message from.</p>"},{"location":"API/#update-displayed-following-distance","title":"Update Displayed Following Distance","text":"Type Byte 1 Byte 2 Variable Name message_type display_distance Variable Type uint8_t hex Min Value 0 0 Max Value 9 100 Example 1 20 <ul> <li>This message that I recieve will allow my system to update the displayed speed on the OLED screen. Byte 1 is the message type allowing my system to easily figure out what the message will be. Then byte 2 is the new distance that I will be displaying OLED screen. I will recieve this message from Divine.</li> </ul>"},{"location":"API/#update-displayed-motor-speed","title":"Update Displayed Motor Speed","text":"Type Byte 1 Byte 2 Variable Name message_type display_speed Variable Type uint8_t hex Min Value 0 -100 Max Value 9 100 Example 0 60 <ul> <li>This message that I recieve allows my system to update the displayed motor speed to the OLED screen. Byte 1 is the message type allowing my system to easily sort the message. Byte 2 is the new speed that the OLED screen will be displaying. I will recieve this message from Divine.</li> </ul>"},{"location":"API/#other-types-of-messages","title":"Other Types of Messages","text":"<ul> <li>Any message that I recieve that I do not have a protocol to handle the system will delete the message to help clean up the system and reduce clogging.</li> <li>If I recieve a message that I sent but no one recieved it I will delete the message so that the message is not cycling forever clogging the message system.</li> <li>Any message that I recieve that is not directed towards me but is directed to another teammember will be passed over to the next teammate in the subsystem so that they may recieve the message.</li> <li>If a message is addressed to someone not in my team then the system will delete the message preventing clogging due to dud messages.</li> </ul>"},{"location":"Bill_of_Materials/","title":"Bill of Materials","text":""},{"location":"Bill_of_Materials/#overview","title":"Overview","text":"<p>Below is the Bill of Materials for the HMI subsystem including all of the major components like the microcontroller, OLED screen and the push buttons while also including all of the support materials like the resistors, capactiors, etc. The Bill of Materials includes the prices estimated for the required components as well as all of the required information about the product. It also shows the amount of each part that will be ordered and what component on thr schematic each ordered part is paired with.</p>"},{"location":"Bill_of_Materials/#bill-of-materials","title":"Bill of Materials","text":""},{"location":"Bill_of_Materials/#pdf-of-bill-of-materials","title":"PDF of Bill of Materials","text":"<p>The PDF of the Bill of Materials can be found below. Inside the PDF all of the links to the vendors and the datasheets for each component can be accessed.</p> <ul> <li>PDF of Bill of Materials</li> </ul>"},{"location":"Component_Selection/","title":"Component Selection","text":""},{"location":"Component_Selection/#overview","title":"Overview","text":"<p>Below all of the major components that are being used in the subsystem are shown with multiple devices that are being considered to be choosen. Each device has its pros and cons, then below each table is the device selection as well as an explination as to why it was selected. The microcontroller selection goes over the choosen microcontroller and why it was selected and how it will be used within the design.</p> <p>The power budget for the subsystem can be found here: Power Budget</p>"},{"location":"Component_Selection/#major-components","title":"Major Components","text":"<p>Switching Voltage Regulator</p> Solution Pros Cons Option 1 LM2575 Switching Voltage Regulator$1.75/eachlink to product * Simple external circuit* Small size * Meets surface mount constraint of project * Good data sheet * All pins are on one side* really small  Option 2  LT1767EMS8 Switching Voltage Regulator $10.57/each  Link to product * Already has a circuit for 12v to 3.3v in its data sheet * Has a good pin layout  * A lot more expensive * A complicated external circuit is required  Option 3  L4971D Switching VOltage Regulator$3.70/each  Link to product * Midprice range * Adjustable voltage output * A lot of pins * An external circuit with lots of components is required <p>Choice: Option 1: LM2575 Switching Voltage Regulator</p> <p>Rationale: This switching voltage regulator emits an output of 3.3 volts when setup with an external circuit like shown in the detailed data sheet. The circuit is not complicated and does not require to many components externally. It also comes at a lower price than either of the other two options.It also allows a current operating range with a max of 1 A and a min voltage of 4 V with a max of 40V</p> <p>Push Buttons</p> Solution Pros Cons Option 1 TS04-66-70-BK-160-SMT Surface Mount Push Button$0.17/eachlink to product * Easy simple switch* Small size* Surface mount button * Not visually appealing * Might be to small so not as easily accessible for everyone to push  Option 2  Gikfun Tact Tactile Push Button $0.35/each  Link to product * Colorful buttons to allow for a more visual experience * big buttons to allow easy pushing for anyone * Not specifically designed for surface mount but the leads can be bent to be surface mount *  Option 3  G3B15AB-XA Push Button Switch$0.81/each  Link to product * Bigger than the other swithces * Removeable cap that can be replaced with a different colored one * More expensive than other switches <p>Choice: Option 2: Gikfun Tact Tactile Push Button</p> <p>Rationale: This button is the best choice because it comes with different caps to allow easier pushing and to allow color labels on the button. The buttons also allowed for different variations of the caps that could include a label so that colorblind people can easily tell the buttons apart.</p> <p>OLED Screen</p> Solution Pros Cons  Option 1 Teyleten 0.96 inch LCD OLED Display  $2.58/each Link to product * Already provided in class Will have experience using it * It is a small screen  Option 2  GeeekPi OLED Display Module I2C 128x64 0.96 Inch Diplay Module Yellow BLue Two-Color Display  $5.00/each  Link to product * Multi color screen  * almost the same as the one used in class * Small screen * Requires different libraries than the one used in class  Option 3  MakerFoucs I2C OLED Display Module 0.91 Inch SSD1306 OLED Display Module White  $4.00/each  Link to product * Wider display to allow for longer sentences  * Same library as OLED in class * Library requires different configureation  * Not as much room vertically <p>Choice: Option 1: Teyleten 0.96 inch LCD OLED Display Board</p> <p>Rationale: The OLED screen is one that we have been given in class and have a lab that teaches us how to use it. Since the OLED is provided in class it will be free to use and gives more time to work with for debugging.</p>"},{"location":"Component_Selection/#summary-of-parts","title":"Summary of Parts","text":"<p>The parts selected above were all choosen based off comparing ease of use with price as well with how they fit into the project requirements and with my team's project. The voltage regulator was choose for its easy use since we had already used it in class as well as its cheaper price point. The buttons were choosen for thier fun colors and their modular design to make the interacitivty of the project more appealing. And the OLED screen was choosen for the familiartiy of it as well as saving cost and time since it was a component that was already aquired. All of these parts are vital to making the HMI subsystem work and the whole project work.</p>"},{"location":"Component_Selection/#microcontroller-selection","title":"Microcontroller Selection","text":""},{"location":"Component_Selection/#reason-for-selection","title":"Reason for Selection","text":"<p>For my microcontroller I decided to go with the PIC18F47Q10-E/PT. This is the surface mount varient of the PIC18F47Q10 that we have used in class. Below is a table of all the information about the microcontroller.</p> PIC Info Answer Model PIC18F47Q10-E/PT Product Page URL Product Page Datasheet URL Datasheet Application Notes URL Application Notes Vendor Link Vendor Link Code Examples Code Example GPIO Read/Write Code Example I2C Read/Write External Resources Programming OLED screen with MPLabX and a PIC Unit Cost $1.64 Supply voltage range 1.8V min to 5.5V max Maximum GPIO Current (per pin) 50 mA Supports External Interrupts Yes Required Programming Hardwar, Cost, URL MPLAB SNAP  Cost: $14.99 Works with MPLabX Yes Works with Microchip Code Configurator Yes"},{"location":"Component_Selection/#role-on-the-team","title":"Role on the team","text":"<p>My role on my team is to design and make the Human Machine Interface (HMI). I plan on doing this by using 3 buttons, a potentiometer, 2 LEDs and an OLED screen. The buttons will allow the user to do simple interactions like start the object following process or control a menu system that is displayed on the OLED screen. The OLED screen is going to be used to display sensor data and prompt instructions to the user on how to use it. The potentiometer will allow the user to select from a range of values to adjust the following distance or the speed of the robot itself. The LEDs will light up when a action is happening for example the green LED might turn on when the robot is in object following mode.</p>"},{"location":"Component_Selection/#pins-needed","title":"Pins needed","text":"<p>For my subsystem I require 13 pins not including power and ground or programming pins. I will need 3 digital input pins, 1 ADC pin, 2 digital output pins, 2 pins for I2C connection, 2 for the UART connection, and then 3 pins for the SNAP programmer. The selected microcontroller </p> Module # Available Needed Associated Pins GPIO 25 5 The button GPIO pins will be on Pins RA6, RA0 and RE2  The potentiometer will be on pin RB1  The two LEDs will be on pins RD5 and RD6 ADC 25 1 The potentiometer will be on pin RB1 UART 2 1 Rx on pin RC7  Tx on pin RC6 SPI 2 0 N/A I2C 2 2 SCL1 on pin RC2  SDA1 on pin RC4 PWM 2/2 0 N/A ICSP 3 3 MCLR is on RE3  ICSPDAT is on RB7  ICSPCLK is on RB6"},{"location":"Component_Selection/#mcc-pin-layout","title":"MCC Pin Layout","text":"<p>Below is the pin selection screen in MCC showing all selected pins allocated. It shows the dedicated pins for UART, the I2C pins, the MCLR pin, the open pins for ICSPDAT and ICSPCLK, the ADC, and then all the GPIO pins dedicated to inputs and outputs respectivly. All the pins match the table above with the pin locations. On the left side of the picture it shows the layout of all the pins on the physical microcontroller. The pins are grouped togther in a way that allows space between each section and keeping like pins together for example the Rx and the upstream input are right next to each other while the Tx and the downstream output are next to each other and the two sections are right by each other.</p> <p></p>"},{"location":"Component_Selection/#mcc-microcontroller-details","title":"MCC Microcontroller details","text":"<p>Below is the setup for the microcontroller where it also shows how many different applications that it can support with its pins.</p> <p></p>"},{"location":"Component_Selection/#final-selection","title":"Final Selection","text":"<p>I beleive that the PIC18F47Q10-E/PT is the best choice for my subsystem as it supports every function that I need to do while programing it in MPLabX makes it simple to do everything that I need to do for my subsystem. Its numerous pins allow for extra flexibility with my design and the pin selection process in MPLabX lets me visiualize where every connection will be and how they can be grouped together.</p>"},{"location":"Component_Selection/#decision-making-process","title":"Decision Making Process","text":"<p>I choose all the parts above to benefit the HMI subsystem as well as the team project as a whole. My parts follow the requirements for the HMI subsystem by allowing for user input through phyiscal means on my subsystem, having a stable voltage of 3.3V to power the microcontroller and other components, having a way to display information that is from other parts of the susbystem as well as my own, and having a PIC meeting the requirement of at least one PIC for the whole team project.</p>"},{"location":"Component_Selection/Power_Budget/","title":"Power Budget","text":""},{"location":"Component_Selection/Power_Budget/#overview","title":"Overview","text":"<p>Below is the power budget for the HMI subsystem. It includes the major component and the microcontroller and estimates how much power it would consume and how long the battery would last with just the one subsystem.</p>"},{"location":"Component_Selection/Power_Budget/#power-budget","title":"Power Budget","text":""},{"location":"Component_Selection/Power_Budget/#explanation","title":"Explanation","text":"<p>The power budget above shows that the minimum amount of battery life expected if all systems were running at their highest power consumption would be 3.1 hours of battery life using the 6 PX1500 AA batteries all connected in series. Each of these batteries according to their data sheet, which is linked below, has a capacity of 3.112Ah and produce 1.5V. When all 6 are aligned in series their combined voltage jumps to 9 volts while keeping the 3.112Ah of battery life. The expected battery life of the subsystem should be more than the 3.1 hours predicted because the subsystem will not be running at max power for the whole 3 hours during its actual operation.</p> <ul> <li>Battery datasheet</li> </ul>"},{"location":"Component_Selection/Power_Budget/#conclusion","title":"Conclusion","text":"<p>This power budget is only considering the power for the HMI subsystem so while the battery life might last longer than expected with just the HMI subsystem when all other subsystems are connected to the batteries power the battery life is expected to drop by at least an hour because other components like the motors take a lot more power.</p>"},{"location":"Component_Selection/Power_Budget/#estimated-power-vs-reality","title":"Estimated Power vs Reality","text":"<p>While we were presenting at the innovation showcase our battery was powering the sensor and the HMI subsystem for almost the whole time. The batteries lasted about 2 and a half hours so it almost lived up to the life expectancy of the power budget, but it was expected that the battery life would be shorters considering that in this power budget it was only considering the power for my subsystem and not the power for other subsystems. </p>"},{"location":"Individual_Block_Diagram/","title":"Individual Block Diagram","text":""},{"location":"Individual_Block_Diagram/#block-diagram","title":"Block Diagram","text":""},{"location":"Individual_Block_Diagram/#overview","title":"Overview","text":"<p>Below is the individual block diagram for my component of my team's project. My component is the HMI (Human Machine Interface). The block diagram includes 3 pushbuttons to allow for user input for quick actions, various LEDs to allow for debugging and to let the user know when a function is happening, a potentionmeter to allow a user to select through a range of values, and an OLED screen to display sensor values and allow the user to see what each button does while also providing short instructions on what the user can do next. The microcontroller choose is the PIC18F47Q10 programmed by the Microchip SNAP programmer. All of this is powered by a 3.3V switching power regulator and connects via UART to the rest of my team's PCBs. Each component is shown on the block diagram below along with their connections and type of connection with the number for pins that the component will use.</p>"},{"location":"Individual_Block_Diagram/#block-diagram_1","title":"Block Diagram","text":""},{"location":"Individual_Block_Diagram/#decision-making-process","title":"Decision Making Process","text":"<p>For the HMI subsystem I decided to use the PIC18F47Q10 microcontroller because I found it was easier to program and easier to select the type of inputs and pins that I would need to use. For the user input I choose 3 buttons and a potentiometer. I thought to use these specific inputs so that I could develop a menu system on the OLED screen where the user could use the potentiometer to scroll through the menu and use the different buttons to select the options in the menu. The buttons connection types are all digital inputs and the potentiometer is an ADC beccause it is an analog device, and the OLED screen communicates via I2C with a connection for both the clock and data lines into the PIC. I also have two LEDs that are used for debugging and to show when an action is that would not be visable otherwise, both are controlled via digital outputs. The upstream and downstream headers were added so that I can communicate with my teammates board's via UART as stated within the project requirements, with my Tx connected to downstream and my Rx connected from the upstream header. There is also the connection with the snap programmer connected via ICSP with three connections with bidirectional serial communication. Everything within the dotted box is powered by 3.3V volts which is given by the microchip LM2575 swithching voltage regulator.</p>"},{"location":"Resources/","title":"Resources","text":""},{"location":"Resources/#downloadable-files","title":"Downloadable files","text":""},{"location":"Resources/#final-mplabx-code","title":"Final MPLABX Code","text":"<p>The final code for the HMI subsystem can be downloaded from this: MPLABX HMI Final Code</p>"},{"location":"Resources/#cad-models","title":"CAD Models","text":"<p>The various CAD models that I made for our project can be downloaded below in a zip file with both the STEP and STL files</p>"},{"location":"Resources/#robot-dome","title":"Robot Dome","text":"<ul> <li>Robot Dome zip Folder</li> </ul>"},{"location":"Resources/#dome-top","title":"Dome Top","text":"<ul> <li>Dome Top zip Folder</li> </ul>"},{"location":"Resources/#pcb-supports","title":"PCB Supports","text":"<ul> <li>PCB Supports zip Folder</li> </ul>"},{"location":"Resources/#custom-button","title":"Custom Button","text":"<ul> <li>Custom Button zip Folder</li> </ul>"},{"location":"Resources/#custom-potentiometer-dial","title":"Custom Potentiometer Dial","text":"<ul> <li>Custom Potentiometer Dial zip Folder</li> </ul>"},{"location":"Resources/#sensor-cover","title":"Sensor Cover","text":"<ul> <li>Sensor Cover zip file</li> </ul>"},{"location":"Resources/#all-files","title":"All Files","text":"<ul> <li>Team 204 Custom CAD Files</li> </ul>"},{"location":"Schematic_and_PCB_Design/","title":"Schematic and PCB Design","text":""},{"location":"Schematic_and_PCB_Design/#schematic-overview","title":"Schematic Overview","text":"<p>The schematic for Team 204\u2019s HMI subsystem is divided into three main sections: power input, voltage regulation, and the microcontroller with its peripherals. Power is supplied through a barrel jack that connects to an external source and includes a jumper that allows the system to operate independently or as part of a shared power system. The upstream and downstream connectors have a power transfer line that enables 9V to be shared between subsystems. A jumper on this line allows the group power to be disconnected so the board can run on its own power supply. The voltage regulator section in the top right of the schematic receives 9V from either the barrel jack or group power. It passes through a fuse for overload protection before being stepped down to 3.3V to power the microcontroller, OLED screen, and other components. The microcontroller section features three buttons and a potentiometer for user input along with two LEDs, one red and one green, that indicate system activity and provide real-time feedback. To the right of the microcontroller, the OLED screen displays data and instructions. Several test points on GPIO pins allow for future expansion. Two UART connectors above the microcontroller enable communication with upstream and downstream teammates, and additional test points are available for troubleshooting. The schematic follows project constraints, class standards, and good design pracitces to allow it to be flexible, user-friendly, and adaptable for future improvements to ensure a reliable and efficient HMI subsystem for Team 204. </p>"},{"location":"Schematic_and_PCB_Design/#schematic-design","title":"Schematic Design","text":""},{"location":"Schematic_and_PCB_Design/#higher-resoultion-image","title":"Higher Resoultion Image","text":"<p>A higher resoultion image can be found in this PDF of schematic.</p>"},{"location":"Schematic_and_PCB_Design/#pcb-design","title":"PCB Design","text":"<p>Below is the PCB for Team 204's HMI subsystem. The PCB is based off of the schematic above and fits on a 75x75mm board. In each corner is a hole 5mm from the sides that is on all of our team's subsystem boards allowing them all to stack vertically saving space within our device. </p>"},{"location":"Schematic_and_PCB_Design/#pcb","title":"PCB","text":""},{"location":"Schematic_and_PCB_Design/#top-of-pcb","title":"Top of PCB","text":""},{"location":"Schematic_and_PCB_Design/#circuit-layout","title":"Circuit Layout","text":""},{"location":"Schematic_and_PCB_Design/#3d-model","title":"3D Model","text":""},{"location":"Schematic_and_PCB_Design/#bottom-of-pcb","title":"Bottom of PCB","text":""},{"location":"Schematic_and_PCB_Design/#circuit-layout_1","title":"Circuit Layout","text":""},{"location":"Schematic_and_PCB_Design/#3d-model_1","title":"3D Model","text":""},{"location":"Schematic_and_PCB_Design/#higher-resoultion-image_1","title":"Higher Resoultion Image","text":"<p>The higher resoultion images can be found in this PDF of PCB.</p>"},{"location":"Schematic_and_PCB_Design/#manufactured-pcb","title":"Manufactured PCB","text":""},{"location":"Schematic_and_PCB_Design/#overview","title":"Overview","text":"<p>The PCB was manufactured by JLC using the design shown above. Below both the unpopulated PCB and the populated PCB are shown. The populated PCB is has all the parts from the bill of materials which can be identified by their markers on the silkscreen in white.</p>"},{"location":"Schematic_and_PCB_Design/#manufactured-unpopulated-pcb","title":"Manufactured Unpopulated PCB","text":""},{"location":"Schematic_and_PCB_Design/#top-of-pcb_1","title":"Top of  PCB","text":""},{"location":"Schematic_and_PCB_Design/#bottom-of-pcb_1","title":"Bottom of PCB","text":""},{"location":"Schematic_and_PCB_Design/#issues-with-the-design","title":"Issues With The Design","text":"<p>Some Issuses that were encountered with the PCB design that was not discovered till after manufacturing was the two eight pin connectors. The footprint used was to small for the actual part so some modifications to the board were made using deadbugging. Another issue that went unnoticed was the CLK line for I2C was connected to the microcontroller via a pin that would not allow I2C so using an extra GPIO pin a modifcation was made and the CLK line was moved.</p>"},{"location":"Schematic_and_PCB_Design/#populated-pcb","title":"Populated PCB","text":""},{"location":"Schematic_and_PCB_Design/#top-of-pcb_2","title":"Top of PCB","text":""},{"location":"Schematic_and_PCB_Design/#bottom-of-pcb_2","title":"Bottom of PCB","text":""},{"location":"Schematic_and_PCB_Design/#issues-after-populating","title":"Issues After Populating","text":"<p>After fixing the issues found right after manufacturing some more issues arrouse. Some issues were how small the resistors were. Having not much experience with choosing sizing for surface mount parts I did not realize how small my resistors were and had a hard time putting them on but they were all eventually able to be put on. Another issue was one of the microcontroller pins A7 seemed to have broken while I was soldering and did not allow for any input as it was the pin that one of my buttons went into. To fix this problem I used the extra GPIO pin A0 to connect my button to and then the button worked fine. Another issue I came across was with the CLK line for I2C as on the original line there was a resistor but on this new line that I had created using GPIO pin C2. To fix this I soldered a through hole resistor to the GPIO test point and to the 3.3V test point to create that pull up resistor that I originally had.</p>"},{"location":"Schematic_and_PCB_Design/#team-decision-with-pcbs","title":"Team Decision with PCBs","text":"<p>In our team as mentioned above in the PCB overview our team opted to go for a standard size of 75x75mm with 3mm holes 5mm away from each corner to allow for our PCBs to be stacked veetically. We thought that this would be a good design choice to allow for compact packaging which is key to making our project sucessful as it needs to be able to freely move around. We also shared a lot of design tips and checked each others board to make sure that the connections were good overall. While somethings did get missed on first look they did not impact the overall project in the end. By verifying that we all had met the class standards we were able to make sure that we could all connect without risk of damaging someone else's PCB.</p>"},{"location":"Schematic_and_PCB_Design/#improvements-to-be-made","title":"Improvements to be Made","text":"<p>If I were able to make a version 2.0 to be manufactured some things that I would change would be to organize the board better, change some parts, fix the footprint for the 8 pin connectors, label all my test points and create a ground test point, Make extra room and fix I2C lines so the OLED screen can mount directly onto the PCB, and choose parts that are easier to solder by hand and not to small. The first point I made was to organize the board better. I think that I can do this by placing the buttons more uniformly as right now they are not all evenly spaced or at the same level on the board. Also under organizing the board would be to make room for the OLED screen to be mounted direcly on the PCB as right now I orignally had a space for it to be mounted but I did not account for the size of the fuse which blocks the OLED screen from connecting to its headers. The fuse is a part that I would change if I could redesign the board as the fuse I have right now is huge and takes up a considerable size on the board. I would switch it to a smaller surface mount fuse that still allows for changing out the fuses without having to unsolder the whole thing. I would also fix the footprint for the 8 pin connectors so I no longer have to deadbug my connectors and I would face them so that both of the connectors allow the wires to stick to the outside of the board as found on teammates boards that having the connectors face the same way end up having one of the wires sticking inwards because of the way that the wires are made. I would also label all of my test points. One the best choices I made was on the Silkscreen I labeled the 9V and the 3.3V test points as well as my extra GPIO pin slots and that helped me so much when debugging and checking connections and I wish that I labeled the rest of the test points as well as I wish that I had a ground test point as I kept having to use the barrel jack ground which was stuck in an akward hard to reach spot on my board. Another thing that I would fix is to triple check all of my pin connections and make sure that they work for what I want them to do. I mistakingly made my CLK line for my I2C connect to a pin on the microcontroller that did not support I2C and luckly one of my extra GPIO pins supported I2C but I would make sure that the pin that I connect to the OLED header supports the CLK pin. One last thing I would change is my resistor sizes. It was a new exeperience puting surface mount parts on my PCB but I did not account for how small some of the parts would be and my resistors and my LEDs were very small and it made it difficult to get them all on so I would choose a little bigger components to save on assembly time and parts lost. I think that implementing these changes into a revised design would grealty improve my PCB and would allow me to better suit my team and our project.</p>"},{"location":"Schematic_and_PCB_Design/#downloadable-files","title":"Downloadable files","text":"<p>Below are the files related to the design, production, and check off of the Schematic and PCB</p>"},{"location":"Schematic_and_PCB_Design/#design-files","title":"Design Files","text":"<p>The Files for the PCB and Schematic can be downloaded from this: HMI System PCB and Schematic zip folder</p>"},{"location":"Schematic_and_PCB_Design/#gerber-and-drill-files","title":"Gerber and Drill Files","text":"<p>The Gerber and Drill files for manufacturing can be downloaded from this: HMI System Gerber and Drill files zip folder</p>"},{"location":"Schematic_and_PCB_Design/#hardware-checkoff-code","title":"Hardware Checkoff Code","text":"<p>The MPLABX code that was used during the in class hardware check off for EGR 314 can be downloaded from this: MPLABX code zip folder</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}